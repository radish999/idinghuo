#! /usr/bin/env node

const figlet = require('figlet');
const rainbow = require('chalk-rainbow');
const axios = require('axios');
const fs = require('fs/promises');
const path = require('path');
const { execSync } = require('child_process');
const inquirer = require('inquirer');

// 获取 TypeScript 类型
function getTypeFromValue(value) {
  if (value === null) return 'null';
  if (Array.isArray(value)) {
    if (value.length === 0) return 'any[]';
    const itemType = getTypeFromValue(value[0]);
    return `${itemType}[]`;
  }
  if (typeof value === 'object') {
    const entries = Object.entries(value).map(([key, val]) => {
      const type = getTypeFromValue(val);
      return `${key}: ${type}`;
    });
    return `{ ${entries.join('; ')} }`;
  }
  return typeof value;
}

// 生成接口定义
function generateInterface(data, interfaceName) {
  if (!interfaceName) {
    throw new Error('Interface name is required');
  }

  if (Array.isArray(data)) {
    if (data.length === 0) return `export type ${interfaceName} = any[];`;
    const item = data[0];
    return generateInterface(item, interfaceName);
  }

  const properties = Object.entries(data).map(([key, value]) => {
    const propertyName = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/.test(key) ? key : `'${key}'`;
    const type = getTypeFromValue(value);
    const optional = value === null ? '?' : '';
    return `  ${propertyName}${optional}: ${type};`;
  });

  return `export interface ${interfaceName} {
${properties.join('\n')}
}`;
}

// 配置文件路径
const CONFIG_FILE = 'enum-config.json';

// 默认配置
const DEFAULT_CONFIG = {
  apiEndpoints: [],
  outputDir: './src/types',
  packageName: '@your-scope/types',
  version: '1.0.0'
};

// 加载配置
async function loadConfig() {
  try {
    const configContent = await fs.readFile(CONFIG_FILE, 'utf-8');
    return JSON.parse(configContent);
  } catch (error) {
    return DEFAULT_CONFIG;
  }
}

// 保存配置
async function saveConfig(config) {
  await fs.writeFile(CONFIG_FILE, JSON.stringify(config, null, 2));
}

// 获取 API 数据
async function fetchApiData(url) {
  try {
    const response = await axios.get(url);
    return response.data;
  } catch (error) {
    throw new Error(`Failed to fetch data from ${url}: ${error.message}`);
  }
}

// 生成类型定义
async function generateTypes(config) {
  const { apiEndpoints, outputDir } = config;
  
  // 确保输出目录存在
  await fs.mkdir(outputDir, { recursive: true });
  
  const indexFileContent = [];
  
  for (const endpoint of apiEndpoints) {
    const { url, typeName } = endpoint;
    if (!typeName) {
      console.error('Type name is missing for endpoint:', url);
      continue;
    }

    console.log(`Fetching data from ${url}...`);
    
    try {
      const response = await axios.get(url);
      const data = response.data;
      
      // 生成接口定义
      const typeContent = generateInterface(data, typeName);
      
      const fileName = `${typeName}.ts`;
      await fs.writeFile(path.join(outputDir, fileName), typeContent);
      
      indexFileContent.push(`export { ${typeName} } from './${typeName}';`);
      
      // 如果是数组类型，同时生成单个项的接口
      if (Array.isArray(data) && data.length > 0 && typeof data[0] === 'object') {
        const itemInterfaceName = `${typeName}Item`;
        const itemContent = generateInterface(data[0], itemInterfaceName);
        await fs.writeFile(path.join(outputDir, `${itemInterfaceName}.ts`), itemContent);
        indexFileContent.push(`export { ${itemInterfaceName} } from './${itemInterfaceName}';`);
      }
    } catch (error) {
      console.error(`Error processing ${url}:`, error.message);
    }
  }
  
  // 生成 index.ts
  await fs.writeFile(
    path.join(outputDir, 'index.ts'),
    indexFileContent.join('\n')
  );
}

// 发布包
async function publishPackage(config) {
  try {
    // 更新 package.json
    const packageJson = {
      name: config.packageName,
      version: config.version,
      main: 'dist/index.js',
      types: 'dist/index.d.ts',
      files: ['dist'],
      scripts: {
        build: 'tsc'
      },
      dependencies: {},
      devDependencies: {
        typescript: '^4.9.0'
      }
    };

    await fs.writeFile('package.json', JSON.stringify(packageJson, null, 2));

    // 创建 tsconfig.json
    const tsConfig = {
      compilerOptions: {
        target: "es2018",
        module: "commonjs",
        declaration: true,
        outDir: "./dist",
        strict: true,
        esModuleInterop: true
      },
      include: ["src/**/*"],
      exclude: ["node_modules", "dist"]
    };

    await fs.writeFile('tsconfig.json', JSON.stringify(tsConfig, null, 2));

    // 安装依赖
    execSync('npm install', { stdio: 'inherit' });

    // 构建
    execSync('npm run build', { stdio: 'inherit' });

    // 发布
    execSync('npm publish', { stdio: 'inherit' });

    console.log(rainbow('Package published successfully!'));
  } catch (error) {
    throw new Error(`Failed to publish package: ${error.message}`);
  }
}

// 初始化配置
async function initializeConfig() {
  const answers = await inquirer.prompt([
    {
      type: 'input',
      name: 'packageName',
      message: 'Enter the package name (e.g., @your-scope/types):',
      default: DEFAULT_CONFIG.packageName
    },
    {
      type: 'input',
      name: 'version',
      message: 'Enter the package version:',
      default: DEFAULT_CONFIG.version
    },
    {
      type: 'input',
      name: 'outputDir',
      message: 'Enter the output directory for generated files:',
      default: DEFAULT_CONFIG.outputDir
    }
  ]);

  const endpoints = [];
  let addMore = true;

  while (addMore) {
    const endpoint = await inquirer.prompt([
      {
        type: 'input',
        name: 'url',
        message: 'Enter the API endpoint URL:'
      },
      {
        type: 'input',
        name: 'typeName',
        message: 'Enter the interface name for this endpoint:'
      }
    ]);

    endpoints.push(endpoint);

    const { continue: shouldContinue } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'continue',
        message: 'Add another endpoint?',
        default: false
      }
    ]);

    addMore = shouldContinue;
  }

  const config = {
    ...answers,
    apiEndpoints: endpoints
  };

  await saveConfig(config);
  return config;
}

// 主函数
async function main() {
  try {
    console.log(rainbow(figlet.textSync('Type Generator')));

    const args = process.argv.slice(2);
    const command = args[0];

    switch (command) {
      case 'init':
        console.log('Initializing configuration...');
        await initializeConfig();
        console.log(rainbow('Configuration saved successfully!'));
        break;

      case 'generate':
        console.log('Generating type definitions...');
        const config = await loadConfig();
        await generateTypes(config);
        console.log(rainbow('Type definitions generated successfully!'));
        break;

      case 'publish':
        console.log('Publishing package...');
        const publishConfig = await loadConfig();
        await generateTypes(publishConfig);
        await publishPackage(publishConfig);
        break;

      case '--help':
      case '-h':
        console.log(`
Usage: idinghuo-cli <command>

Commands:
  init      Initialize configuration
  generate  Generate TypeScript interfaces from API endpoints
  publish   Generate interfaces and publish package
  --help    Show help information

Example:
  idinghuo-cli init
  idinghuo-cli generate
  idinghuo-cli publish
        `);
        break;

      default:
        console.log('Unknown command. Use --help for usage information.');
    }
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
}

main();